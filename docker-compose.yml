services:
  enhanced-ant-bot:
    build:
      context: .
      dockerfile: compatible.Dockerfile
    container_name: enhanced-ant-bot
    restart: unless-stopped
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./config:/app/config:rw
      - ./models:/app/models:rw
    depends_on:
      - prometheus
      - grafana
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "python", "-c", "from src.core.quicknode_service import QuickNodeService; print('Health OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    user: "1000:1000"
    env_file:
      - .env
    environment:
      # Enhanced Ant Bot Configuration
      - SIMULATION_MODE=False
      - INITIAL_CAPITAL=0.1
      - USE_MOCK_GROK=true
      
      # API Keys (from .env file)
      - QUICKNODE_ENDPOINT_URL=${QUICKNODE_ENDPOINT_URL}
      - HELIUS_API_KEY=${HELIUS_API_KEY}
      - JUPITER_API_KEY=${JUPITER_API_KEY:-}
      - GROK_API_KEY=${GROK_API_KEY:-}
      
      # Solana Configuration
      - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - NETWORK=mainnet-beta
      
      # Wallet Configuration
      - PRIVATE_KEY=${PRIVATE_KEY}
      - WALLET_PRIVATE_KEY=${WALLET_PRIVATE_KEY:-}
      - WALLET_ADDRESS=${WALLET_ADDRESS:-}
      
      # System Configuration
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - ENABLE_MONITORING=true
      
      # Trading Configuration
      - MAX_CONCURRENT_TRADES=5
      - MAX_POSITION_SIZE=0.1
      - MIN_POSITION_SIZE=0.01
      - STOP_LOSS_PERCENTAGE=0.05
      - TAKE_PROFIT_PERCENTAGE=0.1

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki:/etc/loki
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log
      - ./config/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
      
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  trading-network:
    driver: bridge 